#
# Library implementation-wide common build flags
#

# Define OSKI_BUILD_TIME so that header files can determine whether
# they are being "included" in an OSKI library module or an
# end-user's application.
#
INCLUDES = -DOSKI_BUILD_TIME \
	-I$(top_srcdir) -I$(top_srcdir)/include \
	-I$(top_builddir) -I$(top_builddir)/include
release_ldflags = -no-undefined -release 1

# Additional library support
support_ldflags = $(PAPI_LIBS)
if HAVE_BLAS_LIBS
support_ldflags += $(BLAS_LIBS) $(FLIBS)
endif
support_ldflags += $(LIBS)

benchbindir = $(bindir)
benchdatadir = $(pkglibdir)/bench

# Macros for instantiating particular types
# and name mangling at compile-time
#
def_IND_INT = -DIND_TAG_CHAR="'i'" -DDEF_IND_TYPE=1
def_IND_LONG = -DIND_TAG_CHAR="'l'" -DDEF_IND_TYPE=2

def_VAL_SINGLE = -DVAL_TAG_CHAR="'s'" -DDEF_VAL_TYPE=1
def_VAL_DOUBLE = -DVAL_TAG_CHAR="'d'" -DDEF_VAL_TYPE=2
def_VAL_COMPLEX = -DVAL_TAG_CHAR="'c'" -DDEF_VAL_TYPE=3
def_VAL_DOUBLECOMPLEX = -DVAL_TAG_CHAR="'z'" -DDEF_VAL_TYPE=4

def_MANGLE = -DDO_NAME_MANGLING

# Macros defining common combinations
#
Tis_cflags = $(def_MANGLE) $(def_IND_INT) $(def_VAL_SINGLE)
Tid_cflags = $(def_MANGLE) $(def_IND_INT) $(def_VAL_DOUBLE)
Tic_cflags = $(def_MANGLE) $(def_IND_INT) $(def_VAL_COMPLEX)
Tiz_cflags = $(def_MANGLE) $(def_IND_INT) $(def_VAL_DOUBLECOMPLEX)

Tls_cflags = $(def_MANGLE) $(def_IND_LONG) $(def_VAL_SINGLE)
Tld_cflags = $(def_MANGLE) $(def_IND_LONG) $(def_VAL_DOUBLE)
Tlc_cflags = $(def_MANGLE) $(def_IND_LONG) $(def_VAL_COMPLEX)
Tlz_cflags = $(def_MANGLE) $(def_IND_LONG) $(def_VAL_DOUBLECOMPLEX)

# For users who do not use libtool, we need to generate a
# special symbol stub containing a list of all external symbols.
CSYMX_BIN = $(top_builddir)/csymx.sh

# eof
